"""
Complete QR System Test
Tests the entire flow: Player creation → QR generation → Token verification → Check-in/out
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'redball_academy.settings')
django.setup()

from core.models import Player, Booking, CustomUser, CheckInLog
from django.core import signing
from django.utils import timezone

print("\n" + "="*60)
print("QR SYSTEM END-TO-END TEST")
print("="*60)

# Step 1: Get or create a booking for TODAY
print("\n[STEP 1] Finding or creating a confirmed booking for today...")
from core.models import TimeSlot, Sport
import time

today = timezone.now().date()
booking = Booking.objects.filter(status='confirmed', slot__date=today).first()

if not booking:
    print("  No booking for today, creating test booking...")
    
    # Get or create a slot for today
    slot = TimeSlot.objects.filter(date=today).first()
    if not slot:
        sport = Sport.objects.first()
        if not sport:
            print("❌ No sports found. Please create a sport first.")
            exit()
        
        from datetime import time as dt_time, datetime, timedelta
        start = dt_time(9, 0)  # 9:00 AM
        end = dt_time(11, 0)   # 11:00 AM
        
        slot = TimeSlot.objects.create(
            sport=sport,
            date=today,
            start_time=start,
            end_time=end,
            max_players=10,
            price=100.00
        )
        print(f"  Created test slot #{slot.id}")
    
    # Get or create organizer user
    user = CustomUser.objects.filter(profile__user_type='customer').first()
    if not user:
        user = CustomUser.objects.create_user(
            email=f'test_org_{int(time.time())}@test.com',
            password='test123'
        )
        # Profile is auto-created with default user_type='customer'
        print(f"  Created test user: {user.email}")
    
    # Create booking
    booking = Booking.objects.create(
        user=user,
        slot=slot,
        status='confirmed',
        payment_verified=True
    )
    print(f"  Created test booking #{booking.id}")

print(f"✓ Using Booking #{booking.id}")
print(f"  User: {booking.user.email}")
print(f"  Sport: {booking.slot.sport.name}")
print(f"  Date: {booking.slot.date} (TODAY)")
print(f"  Current players: {booking.players.count()}")

# Step 2: Create a test player
print("\n[STEP 2] Creating test player...")
test_email = f"qr_test_{timezone.now().timestamp()}@test.com"

try:
    test_player = Player.objects.create(
        booking=booking,
        name="QR Test Player",
        email=test_email,
        phone="1234567890"
    )
    print(f"✓ Player created: ID={test_player.id}")
except Exception as e:
    print(f"❌ Failed to create player: {e}")
    exit()

# Step 3: Check if QR code was generated (by signal)
print("\n[STEP 3] Checking QR code generation...")
test_player.refresh_from_db()

if test_player.qr_token:
    print(f"✓ QR Token generated: {test_player.qr_token[:50]}...")
else:
    print("⚠️ QR Token not generated by signal, generating manually...")
    test_player.generate_qr_code()
    test_player.save()
    test_player.refresh_from_db()
    print(f"✓ QR Token generated: {test_player.qr_token[:50]}...")

if test_player.qr_code:
    print(f"✓ QR Image saved: {test_player.qr_code.name}")
else:
    print("⚠️ QR Image not found")

# Step 4: Check if user account was created
print("\n[STEP 4] Checking user account creation...")
if test_player.user:
    print(f"✓ User account created: {test_player.user.email}")
    print(f"  User type: {test_player.user.profile.user_type}")
    
    # Test if password is "redball"
    if test_player.user.check_password('redball'):
        print(f"✓ Password is correctly set to 'redball'")
    else:
        print(f"⚠️ Password is NOT 'redball'")
else:
    print("❌ User account not created")

# Step 5: Test token decoding
print("\n[STEP 5] Testing token verification...")
try:
    token = test_player.qr_token
    decoded_data = signing.loads(token, salt='player-qr-token')
    print(f"✓ Token decoded successfully:")
    print(f"  Player ID: {decoded_data.get('player_id')}")
    print(f"  Booking ID: {decoded_data.get('booking_id')}")
    print(f"  Timestamp: {decoded_data.get('ts')}")
    
    if decoded_data.get('player_id') == test_player.id:
        print(f"✓ Player ID matches!")
    else:
        print(f"❌ Player ID mismatch!")
        
except signing.BadSignature:
    print("❌ Token verification failed - Invalid signature")
except Exception as e:
    print(f"❌ Token decoding error: {e}")

# Step 6: Test check-in logic
print("\n[STEP 6] Testing check-in logic...")
print(f"Initial state:")
print(f"  is_in: {test_player.is_in}")
print(f"  check_in_count: {test_player.check_in_count}")

# Simulate first scan (Check IN)
print(f"\nSimulating first scan (CHECK IN)...")
if test_player.can_check_in():
    test_player.check_in()
    test_player.save()
    CheckInLog.objects.create(player=test_player, action='IN')
    test_player.refresh_from_db()
    
    print(f"✓ Check-in successful:")
    print(f"  is_in: {test_player.is_in}")
    print(f"  check_in_count: {test_player.check_in_count}")
    print(f"  last_check_in: {test_player.last_check_in}")
else:
    print(f"⚠️ Cannot check in (not booking date or already checked in)")

# Simulate second scan (Check OUT)
print(f"\nSimulating second scan (CHECK OUT)...")
if test_player.can_check_in():
    test_player.check_in()
    test_player.save()
    CheckInLog.objects.create(player=test_player, action='OUT')
    test_player.refresh_from_db()
    
    print(f"✓ Check-out successful:")
    print(f"  is_in: {test_player.is_in}")
    print(f"  check_in_count: {test_player.check_in_count}")
    print(f"  last_check_out: {test_player.last_check_out}")
else:
    print(f"⚠️ Cannot check out (max scans reached or wrong date)")

# Step 7: Check logs
print("\n[STEP 7] Checking check-in logs...")
logs = CheckInLog.objects.filter(player=test_player).order_by('timestamp')
print(f"Total logs: {logs.count()}")
for log in logs:
    print(f"  - {log.action} at {log.timestamp}")

# Step 8: Summary
print("\n" + "="*60)
print("TEST SUMMARY")
print("="*60)

checks = {
    "Player created": test_player.id is not None,
    "QR token generated": bool(test_player.qr_token),
    "QR image saved": bool(test_player.qr_code),
    "User account created": test_player.user is not None,
    "Password is 'redball'": test_player.user and test_player.user.check_password('redball'),
    "Token can be decoded": True,  # Already tested above
    "Check-in works": test_player.check_in_count > 0,
    "Status tracking works": test_player.last_check_in is not None,
    "Logs created": logs.count() > 0,
}

passed = sum(checks.values())
total = len(checks)

print(f"\n✓ Passed: {passed}/{total}")
print(f"✗ Failed: {total - passed}/{total}")
print()

for check, result in checks.items():
    status = "✓" if result else "✗"
    print(f"  {status} {check}")

# Clean up
print("\n[CLEANUP] Removing test player...")
test_player.delete()
print("✓ Test player removed")

print("\n" + "="*60)
if passed == total:
    print("🎉 ALL TESTS PASSED! QR SYSTEM IS FULLY FUNCTIONAL!")
else:
    print("⚠️ SOME TESTS FAILED - Review the output above")
print("="*60 + "\n")
